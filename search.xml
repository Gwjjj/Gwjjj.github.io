<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <url>/2019/11/11/Spring/</url>
      <content type="html"><![CDATA[<h3><span id="spring">Spring</span></h3><hr>
<h4><span id="ioc">IOC</span></h4><h5><span id="使用ioc削减程序耦合">使用IOC削减程序耦合</span></h5><p>把创建对象的权力交给框架，是框架的重要特征。<br>IOC容器是一个Map结构&lt;String,Object&gt;</p>
<h5><span id="获取核心内容">获取核心内容</span></h5><ul>
<li>创建ApplicationContext接口的实现类，一读取配置文件马上就创建对象。<ol>
<li>ClassPathXmlApplicationContext 加载类路径下的配置文件</li>
<li>FileSystemApplicationContext 加载磁盘任意路径下的配置文件(必须有访问权限)</li>
<li>AnnotationConfigApplicationContext 用于读取注解</li>
</ol>
</li>
<li>BeanFactory 创建对象时采用的策略是延迟加载。</li>
<li>getBean()获取对象<h5><span id="创建bean的三种方式">创建bean的三种方式</span></h5></li>
</ul>
<ol>
<li>使用默认构造函数<br>&lt;bean id=””,class=””,scope=””,init-method=””,destroy-method=””&gt; 如果类没有<strong>默认</strong>构造函数，则无法创建</li>
<li>使用普通工厂中的方法创建对象,并存入Spring容器(容器销毁时对象销毁)<br>&lt;bean id=”factoryid”,class=”factoeyclass”&gt;<br>&lt;bean id=”classid”, factory-bean=”factoryid”,factory-method=”getclass”&gt;</li>
<li>使用工厂中的静态方法创建对象,并存入Spring容器(对象长时间不用且没有别的对象引用时，由java gc回收)<br>&lt;bean id=”classid”, factory-bean=”factoeyclass”,factory-method=”getclass”&gt;</li>
<li>注解</li>
<li>bean的作用范围调整<ol>
<li>singleton 单例(默认值)</li>
<li>prototype 多例</li>
<li>request 作用于web应用的请求范围</li>
<li>session 作用于web应用的会话范围</li>
<li>global-session 作用于集群环境的会话范围(全局会话范围)，当不是集群环境时就是session</li>
</ol>
</li>
</ol>
<h5><span id="依赖注入dependency-injection">依赖注入(Dependency Injection)</span></h5><p>在当前类中需要用到其他类的对象，由Spring为我们提供，我们只需要在配置文件中说明。<br>依赖关系的维护称之为依赖注入。</p>
<ul>
<li><p>注入方式</p>
<ol>
<li><p>使用构造函数提供</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">vlaue</span>/<span class="attr">ref</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用set方法提供</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">""</span>  <span class="attr">value</span>/<span class="attr">ref</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用注解提供</p>
</li>
</ol>
</li>
<li><p>注入类型</p>
<ol>
<li><p>基本类型和String</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其他bean类型(xml或注解配置的)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">ref</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>复杂类型/集合类型</p>
</li>
</ol>
<ul>
<li><p>list/array/set</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>map/prop</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h5><span id="注解">注解</span></h5><ol>
<li>Component<br>把当前类对象存入Spring容器中 </li>
<li>Controller<br>与Component一样，一般用在表现层</li>
<li>Service<br>与Component一样，一般用在业务层</li>
<li>Repository<br>与Component一样，一般用在持久层</li>
<li>Autowired<br>自动按照数据类型注入。只要容器中有唯一一个bean对象类型和要注入的数据类型匹配，就可以成功注入。<br>如果bean对象不唯一，会根据变量名称在符合前面条件的bean对象中进行查找。</li>
<li>Qualifier<br>根据名称注入，在给类成员注入时不能单独使用(<strong>必须与Autowired配合</strong>)，但是在给方法参数注入时可以单独使用。<br>属性:<br>value：用于指定注入bean的id</li>
<li>Resource<br>直接按照bean的id注入<br>属性：<br>name：用于指定注入bean的id<blockquote>
<p>以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用。<br>另外集合类型的注入只能通过XML来实现。</p>
</blockquote>
</li>
<li>Value<br>用于注入基本类型和String类型的数据<br>属性：<br>value：用于指定数据的值。它可以使用spring中的Spel–$(表达式)</li>
<li>Scope<br>用于指定bean的作用范围<br>属性：<br>value：指定范围的取值。(singleton和prototype最常用)</li>
<li>PostConstruct<br>用于指定初始化方法</li>
<li>PreDestroy<br>用于指定销毁方法<h5><span id="新注解">新注解</span></h5></li>
<li>Configuration<br>当前类是一个配置类</li>
<li>ComponentScan({})<br>指定spring在创建容器时要扫描的包<br>属性：<br>包的数组</li>
<li>Bean<br>创建bean对象并存入bspring容器中<br>属性：<br>name bean的id，默认值是当前方法的名称<br>如果方法有参数，spring会去容器中查找有没有可用的bean对象。</li>
<li>import<br>用于导入其他配置类作为其子配置类<br>属性<br>value 配置类的字节码</li>
<li>PropertySource<br>用于指定properties文件的位置<br>属性<br>value 文件名称和路径(classpath表示在类路径下)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(&#123;<span class="string">"cn.gwjjj"</span>&#125;)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:jdbcconfig.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span></span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.driver&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.user&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jdbc.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 连接池中的连接应该是多例的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"JdbcTemplate"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>) </span><br><span class="line">    <span class="function"><span class="keyword">public</span> JDBCTemple <span class="title">createJdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(name=<span class="string">"dataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">createDataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(user);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h4><span id="aop">AOP</span></h4><h5><span id="aspect-oriented-programming">Aspect Oriented Programming</span></h5><p>面向切面编程</p>
<h5><span id="相关术语">相关术语</span></h5><p>Joinpoint(连接点)：spring只支持方法类型的连接点<br>Pointcut(切入点): 要对哪些Joinpoint进行拦截的定义<br>Advice(通知/增强)：拦截到Joinpoint之后做的事<br>Introduction(引介)：特殊的通知<br>Target(目标对象)：代理的目标对象<br>Weaving(织入)：增强对象的过程<br>Proxy(代理)：一个类被AOP织入后产生的结果代理类<br>Aspect(切面)：切入点和通知的结合</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/11/11/Session/</url>
      <content type="html"><![CDATA[<h4><span id="session">Session</span></h4><h4><span id="概念">概念</span></h4><ol>
<li>一次会话包含多次请求和响应</li>
<li>功能：在一次的会话范围内共享数据</li>
<li>方式<ol>
<li>客户端会话技术：Cookie</li>
<li>服务器端会话技术：Session</li>
</ol>
</li>
</ol>
<h4><span id="cookie">cookie</span></h4><ul>
<li>概念：客户端会话技术，将数据保存在客户端</li>
<li>步骤<ol>
<li>创建cookie，绑定数据<br> new Cookie(String name, String value)</li>
<li>发送cookoe<br> response.addCookie(Cookie cookie)</li>
<li>获取cookie，拿到数据<br> request.getCookies()</li>
</ol>
</li>
<li>原理<ul>
<li>基于响应头set-cookie和请求头cookie实现</li>
</ul>
</li>
<li>持久化储存<ul>
<li>setMaxAge(int seconds)<ol>
<li>正数：写到硬盘的文江中</li>
<li>默认值：在浏览器内存里</li>
<li>0：删除cookie信息</li>
</ol>
</li>
</ul>
</li>
<li>共享<ul>
<li>setPath(String path)</li>
<li>同一个服务器 setPath(“/“)</li>
<li>不同服务器 setDomain(String path)  # setDomain(“.baidu.com”) 一级域名</li>
</ul>
</li>
<li>特点<ol>
<li>cookie储存在客户端浏览器</li>
<li>浏览器对于单个cookie的大小有限制  以及同一个域名下的总cookie数量有限制</li>
</ol>
</li>
</ul>
<h4><span id="session">Session</span></h4><ul>
<li>概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中</li>
<li>HttpSession对象<ul>
<li>Object getAttribute(String name)</li>
<li>void setAttribute(String name, Object value)</li>
<li>void removeAttribute(String name)</li>
</ul>
</li>
<li>Session的实现是依赖于Cookie的</li>
<li>客户端关闭保证session同一个：使用new Cookie(“JSESSIONID, session.getId())并持久化保存</li>
<li>服务器关闭保证数据不丢失<ul>
<li>session的钝化：在服务器正常关闭之前，将session对象序列化到硬盘上</li>
<li>session的活化：在服务器启动后将session文件转化为内存中的session对象</li>
</ul>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/11/11/Servlet/</url>
      <content type="html"><![CDATA[<h3><span id="servlet">Servlet</span></h3><h4><span id="概念">概念</span></h4><ul>
<li>server applet: 运行在服务器端的小程序</li>
<li>一个接口，Java类被浏览器访问的规则</li>
<li>版本 <ul>
<li>3.0之前：web.xml</li>
<li>3.0之后：注解 @WebServlet</li>
</ul>
</li>
</ul>
<h4><span id="生命周期">生命周期</span></h4><ol>
<li>初始化 init</li>
<li>服务 service</li>
<li>销毁 destroy<h4><span id="体系结构">体系结构</span></h4>Servlet -&gt; 抽象类GenericServlet -&gt; 抽象类HttpServlet</li>
</ol>
<ul>
<li><p>GenericServlet将除了service方法的四个方法作了默认空实现，只需复写service方法</p>
</li>
<li><p><strong>HttpServlet</strong></p>
<ul>
<li><p>对http协议的一种封装</p>
</li>
<li><p>service</p>
<ol>
<li><p>判断请求方式 </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String method = req.getMethod();  # 返回"GET"或"POST"</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取数据<br> doGet()<br> doPost()<br> 其他五种</p>
</li>
</ol>
</li>
<li><p>使用</p>
<ol>
<li>定义类继承HttpServlet</li>
<li>复写doGet()或者doPost()</li>
</ol>
</li>
<li><p>相关配置</p>
<ol>
<li>urlpattern：Servlet访问的路径</li>
<li>路径定义规则<ol>
<li>/xxx</li>
<li>/xxx/xxx</li>
<li>*.do<h4><span id="http">HTTP</span></h4></li>
</ol>
</li>
</ol>
</li>
</ul>
</li>
<li><p>超文本传输协议，客户端和服务器通信时发送数据的格式</p>
</li>
<li><p>特点</p>
<ol>
<li>基于TCP/IP的高级协议</li>
<li>默认端口号 80</li>
<li>基于请求/相应模型：一次请求对应一次响应</li>
<li>无状态：每次请求之间相互独立，不能交互数据</li>
</ol>
</li>
<li><p>历史版本</p>
<ul>
<li>1.0 每次请求响应都会建立新的连接</li>
<li>1.1 会复用连接</li>
</ul>
</li>
<li><p>请求消息数据格式</p>
<ol>
<li>请求行<ul>
<li>请求方式 请求url 请求协议/版本</li>
<li>GET /login.html HTTP/1.1</li>
</ul>
</li>
<li>请求头<ul>
<li>请求头名称: 请求头值</li>
<li>User-Agent：浏览器版本信息</li>
<li>Referer：请求来源<ol>
<li>防盗链</li>
<li>统计工作</li>
</ol>
</li>
</ul>
</li>
<li>请求空行<br> 空行：分割请求头和请求体</li>
<li>请求体(正文)<br> post的键值对</li>
</ol>
</li>
</ul>
<h4><span id="request">Request</span></h4><ul>
<li><p>作用</p>
<ul>
<li>Request和Response都是由服务器创建的</li>
<li>Request对象是来获取请求消息，Response对象是来设置响应消息</li>
</ul>
</li>
<li><p>Request对象继承体系结构</p>
<ul>
<li>ServletRequest<br>  |  继承</li>
<li>HttpServletRequest<br>  |  实现</li>
<li>org.apach.catalina.connector.RequestFacade</li>
</ul>
</li>
<li><p>Request功能</p>
<ol>
<li><p>获取请求消息数据</p>
<ol>
<li>获取请求行数据<ul>
<li>获取请求方式 getMethod</li>
<li><strong>获取虚拟目录</strong> getContextPath</li>
<li>获取Servlet路径 getServletPath</li>
<li>获取get方式携带参数 getQueryString</li>
<li><strong>获取请求URI</strong> getRequestURI</li>
<li><strong>获取请求URL</strong> getRequestURL</li>
<li>获取协议版本 getProtocol</li>
<li>获取客户机的IP地址 getRemoteAddr</li>
</ul>
</li>
<li>获取请求头数据<ul>
<li><strong>通过请求头名称获取请求头值</strong> getHeader</li>
<li>获取所有请求头名称 getHeaderNames</li>
</ul>
</li>
<li>获取请求体数据<ul>
<li>获取流对象(字符字节) getReader getInputStream</li>
<li>从流对象中拿数据</li>
</ul>
</li>
</ol>
</li>
<li><p>其他功能</p>
<ol>
<li><p>获取请求参数通用方式</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getParameter</span><span class="params">(String name)</span> 根据参数名称获取参数值</span></span><br><span class="line"><span class="function">String[] <span class="title">getParameterValues</span><span class="params">(String name)</span> 根据参数名称获取参数值的数组</span></span><br><span class="line"><span class="function">Enumeration&lt;String&gt; <span class="title">getParameterNames</span><span class="params">()</span> 获取所有参数名称</span></span><br><span class="line"><span class="function">Map&lt;String,String[]&gt; <span class="title">getParameterMap</span><span class="params">()</span> 获取所有参数的map集合</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>请求转发: 一种在服务器内部的资源跳转方式</p>
<ul>
<li>步骤<ol>
<li>通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</li>
<li>使用RequestDispatcher对象来进行转发: forward(ServletRequest request, ServletResponse response)</li>
</ol>
</li>
<li>特点<ol>
<li>浏览器地址不会发生变化</li>
<li>只能转发到当前服务器内部资源中</li>
<li>转发是一次请求(可以共享数据)</li>
</ol>
</li>
</ul>
</li>
<li><p>共享数据</p>
<ul>
<li>域对象：一个有作用范围的对象，可以在范围内共享数据</li>
<li>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</li>
<li>方法 <ol>
<li>setAttribute(String name, Object obj) 存储数据</li>
<li>Object getAttribute(String name) 获取值</li>
<li>removeAttribute(String name) 移除数据</li>
</ol>
</li>
</ul>
</li>
<li><p>获取ServletContext</p>
<ul>
<li>ServletContext getServletContext()   </li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<h4><span id="response">Response</span></h4><ul>
<li>响应消息数据格式<ol>
<li>响应行 HTTP/1.1 200 OK<ul>
<li>协议和版本</li>
<li>响应状态码<ul>
<li>1XX 服务器接收客户端消息但没有接收完成</li>
<li>2XX 成功</li>
<li>3XX 重定向，访问缓存</li>
<li>4XX 客户端错误</li>
<li>5XX 服务器端错误</li>
</ul>
</li>
<li>状态码描述</li>
</ul>
</li>
<li>响应头<ul>
<li>格式：头 值</li>
<li>常见响应头<ol>
<li>Content-Type: 服务器告诉客户端本次响应体数据格式以及编码格式</li>
<li>Content-disposition：服务器告诉客户端以什么格式打开相应体数据<ul>
<li>in-line 在当前页面内打开(打开)</li>
<li>attachment;filename=xxx 以附件形式打开(文件下载)</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li>响应空行</li>
<li>响应体   <ul>
<li>传输的数据</li>
</ul>
</li>
</ol>
</li>
<li>Response对象<ul>
<li>功能：设置响应消息<ul>
<li>设置响应行<ol>
<li>设置状态码 setStatus(int sc)</li>
</ol>
</li>
<li>设置响应头<ol>
<li>setHeader(String name, String value)<ul>
<li>response.setStatus(302)<br>response.setHeader(“location”,url) # 重定向的一种写法</li>
</ul>
</li>
</ol>
</li>
<li>设置响应体<ol>
<li>获取输出流<ul>
<li>PrintWriter getWriter()</li>
<li>ServletOutputStream getOutputStream()</li>
</ul>
</li>
<li>使用输出流<ul>
<li>字符输出流</li>
<li>字节输出流</li>
</ul>
</li>
</ol>
</li>
<li>重定向 <ul>
<li>response.sendRedirect(String s)</li>
<li>特点<ul>
<li>地址栏变化</li>
<li>可以访问其他站点的资源</li>
<li>重定向是两次请求(不可以共享数据)</li>
</ul>
</li>
<li>路径写法</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/11/11/Maven/</url>
      <content type="html"><![CDATA[<h4><span id="maven">Maven</span></h4><h5><span id="概念">概念</span></h5><p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p>
<h5><span id="仓库">仓库</span></h5><ol>
<li>本地仓库</li>
<li>远程仓库(私服)</li>
<li>中央仓库<h5><span id="项目目录">项目目录</span></h5></li>
<li>src/main/java 核心代码部分</li>
<li>src/main/resoucres 配置文件部分</li>
<li>src/test/java 测试代码部分</li>
<li>src/test/resources 测试配置文件</li>
<li>src/main/webapp 页面资源，js，css，图片等<h5><span id="命令">命令</span></h5></li>
<li>mvn -v</li>
<li>mvn compile</li>
<li>mvn clean</li>
<li>mvn test(test文件下会被编译)</li>
<li>mvn package(打成包)  </li>
<li>mvn install(把包安装到本地仓库)</li>
</ol>
<h4><span id="格式">格式</span></h4><ol>
<li><p>项目自身信息</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  // 公司组织的名称</span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core-lgpl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  // 项目名</span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  // 版本号</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>项目运行所依赖的jar包信息</p>
</li>
<li><p>项目运行环境信息</p>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/11/11/Listen/</url>
      <content type="html"><![CDATA[<h4><span id="listen">Listen</span></h4><h4><span id="概念">概念</span></h4><ul>
<li>web的三大组件之一</li>
<li>事件监听机制<ul>
<li>事件</li>
<li>事件源</li>
<li>监听器</li>
<li>注册监听(前三个绑定在一起)</li>
</ul>
</li>
</ul>
<h4><span id="方法">方法</span></h4><ul>
<li>ServletContextListener接口规定监听ServletContext对象的创建和销毁<ul>
<li>void contextDestroy(ServletContextEvent sce)</li>
<li>void contextInitialize(ServletContextEvent sce)</li>
</ul>
</li>
<li>web.xml或者注解配置监听器</li>
<li><context-param></context-param> 指定初始化参数</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/11/11/JQuery/</url>
      <content type="html"><![CDATA[<h4><span id="jquery">JQuery</span></h4><h5><span id="概念">概念</span></h5><p>一个javaScript的框架。简化js的开发</p>
<h4><span id="转换">转换</span></h4><ol>
<li>js -&gt; jq: $(js对象)</li>
<li>jq -&gt; js: jq对象[index]或者jq对象.get(index)<h4><span id="选择器">选择器</span></h4></li>
<li>入口函数<br> $(function(){})相当于windows.onload # onload只能执行一次</li>
<li>基本选择器<ol>
<li>标签选择器<ul>
<li>$(“html标签名”)</li>
</ul>
</li>
<li>id选择器<ul>
<li>$(“#id”)</li>
</ul>
</li>
<li>类选择器<ul>
<li>$(“.class属性”)</li>
</ul>
</li>
<li>并集选择器<ul>
<li>$(“选择器1,选择器2”)</li>
</ul>
</li>
</ol>
</li>
<li>层级选择器<ol>
<li>后代选择器<ul>
<li>$(“A B”) A元素下的所有B元素</li>
</ul>
</li>
<li>子选择器<ul>
<li>$(“A &gt; B”) A元素下的所有B子元素</li>
</ul>
</li>
</ol>
</li>
<li>属性选择器<ol>
<li>属性名称选择器<ul>
<li>$(“A[属性名]”)</li>
</ul>
</li>
<li>属性选择器<ul>
<li>$(“A[属性名=’值’]”)</li>
</ul>
</li>
<li>符合属性选择器<ul>
<li>$(“A[属性名=’值’][]…”)</li>
</ul>
</li>
</ol>
</li>
<li>过滤选择器<ol>
<li>首元素选择器<ul>
<li>:first</li>
</ul>
</li>
<li>尾元素选择器<ul>
<li>:last</li>
</ul>
</li>
<li>非元素选择器<ul>
<li>:not(selecter) 不包括指定内容的元素</li>
</ul>
</li>
<li>偶数选择器<ul>
<li>:even 偶数,从0开始计数</li>
</ul>
</li>
<li>奇数选择器<ul>
<li>:odd 奇数，从0开始计数</li>
</ul>
</li>
<li>等于索引选择器<ul>
<li>:eq(index) 指定索引元素</li>
</ul>
</li>
<li>大于索引选择器<ul>
<li>:gt(index) </li>
</ul>
</li>
<li>小于索引选择器<ul>
<li>:lt(index)</li>
</ul>
</li>
<li>标题选择器<ul>
<li>:header 获得标题(h1~h6)元素</li>
</ul>
</li>
</ol>
</li>
<li>表单过滤选择器<ol>
<li>可用元素选择器<ul>
<li>:enabled 获得可用元素</li>
</ul>
</li>
<li>不可用元素选择器    <ul>
<li>:disabled 获得不可用元素</li>
</ul>
</li>
<li>选中选择器    <ul>
<li>:checked 获得单选/复选框选中的元素</li>
</ul>
</li>
<li>选中选择器    <ul>
<li>:selected 获得下拉框选中的元素<h4><span id="dom操作">DOM操作</span></h4></li>
</ul>
</li>
</ol>
</li>
<li>内容操作<ol>
<li>html() 标签体内容(包含子标签体)</li>
<li>text() 标签体纯文本内容</li>
<li>val() 获取/设置元素的value属性值</li>
</ol>
</li>
<li>属性操作<ol>
<li>通用属性操作<ol>
<li>attr(name,val)</li>
<li>removeAttr(name)</li>
<li>prop(name,val)</li>
<li>removeProp(name)</li>
<li>css(属性,值)<blockquote>
<p>区别：如果操作是元素的固有属性，则建议使用prop。自定义属性则用attr。</p>
</blockquote>
</li>
</ol>
</li>
<li>对class属性操作<ol>
<li>addClass(class) 与prop(“class”,class)类似</li>
<li>removeClass(class)</li>
<li>toggleClass(class) 切换class(如果存在(不存在)就删除(添加)一个类)</li>
</ol>
</li>
</ol>
</li>
<li>CRUD操作<ol>
<li>append() 父元素将子元素添加到末尾<br> 对象一.append(对象二): 将对象二添加到对象一元素内部，并且在末尾</li>
<li>prepend() 在开头</li>
<li>appendTo() 与1相反</li>
<li>prependTo() 与2相反</li>
<li>after() 添加元素到元素后边(兄弟关系)<br> 对象一.after(对象二) 将对象二添加到对象一后边</li>
<li>before() 前边</li>
<li>insertAfter() 与5相反</li>
<li>insertBefore() 与6相反</li>
<li>remove() 移除元素</li>
<li>empty() 清空所有后代元素</li>
</ol>
</li>
</ol>
<h4><span id="高级">高级</span></h4><ol>
<li>动画<ol>
<li>默认显示和隐藏方式<ol>
<li>show([speed,[easing],[fn]])</li>
<li>hide([speed,[easing],[fn]])</li>
<li>toggle([speed,[easing],[fn]])</li>
</ol>
</li>
<li>滑动显示和隐藏方式<ol>
<li>slideDown([speed,[easing],[fn]])</li>
<li>slideUp([speed,[easing],[fn]])</li>
<li>slideToggle([speed,[easing],[fn]])</li>
</ol>
</li>
<li>淡入淡出<ol>
<li>fadeIn([speed,[easing],[fn]])</li>
<li>fadeOut([speed,[easing],[fn]])</li>
<li>fadeToggle([speed,[easing],[fn]])</li>
</ol>
</li>
<li>参数<ol>
<li>speed 动画速度 (slow, normal, fast)或者动画时长毫秒值</li>
<li>easing 切换效果 (swing, liner)(swing先慢再快再慢,liner匀速)</li>
<li>fn 再动画完成时执行的函数，每个元素执行一次。</li>
</ol>
</li>
</ol>
</li>
<li>遍历<ol>
<li>jq对象.each(function(index, elemenvt))</li>
<li>$.each(Object, callback )</li>
<li>for..of: 3.0之后提供</li>
<li>return false/return true = break/continue</li>
</ol>
</li>
<li>事件绑定<ol>
<li>jquery标准的绑定方式<br> js对象.事件方法(callback)</li>
<li>on绑定事件/off解除绑定<br> jq对象.on(“事件名称”,callback)<br> jq对象.off(“事件名称”)</li>
<li>事件切换：toggle<br> jq对象.toggle(fn1,fn2…)</li>
</ol>
</li>
<li>插件</li>
</ol>
<ul>
<li>增强JQuery的功能</li>
<li>$.fn.extend(object) 添加jQuery功能<ul>
<li>$.fn.extend({check:callback})</li>
</ul>
</li>
<li>$.extend(object) 增强jQuery对象自身的功能<ul>
<li>$/JQuery</li>
</ul>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/11/11/Filter/</url>
      <content type="html"><![CDATA[<h4><span id="filter">Filter</span></h4><h4><span id="概念">概念</span></h4><ul>
<li>web中的过滤器，当访问服务器的资源时可以将请求拦截下来，完成一些特殊的功能</li>
<li>一般用于完成通用的操作。如登陆验证、统一编码处敏感字符过滤</li>
</ul>
<h4><span id="方法">方法</span></h4><ol>
<li><p>定义一个方法，实现接口Filter</p>
</li>
<li><p>复写方法</p>
</li>
<li><p>配置拦截路径</p>
<ol>
<li>web.xml</li>
<li>注解@(WebFilter(uri))</li>
<li>doFilter(req,resp)</li>
</ol>
</li>
<li><p>拦截路径配置</p>
<ul>
<li>具体资源路径：/index.jsp</li>
<li>拦截目录：/user/*</li>
<li>后缀名拦截：*.jsp</li>
<li>拦截所有资源：/*</li>
</ul>
</li>
<li><p>拦截方式配置</p>
<ul>
<li>注解配置 设置dispatcherTypes<ol>
<li>REQUEST 默认值 浏览器直接请求资源</li>
<li>FORWARD 转发访问资源</li>
<li>INCLUDE 包含访问资源</li>
<li>ERROR 错误跳转</li>
<li>ASYNC 异步资源</li>
</ol>
</li>
<li>web.xml<ul>
<li><dispatcher></dispatcher></li>
</ul>
</li>
</ul>
</li>
<li><p>过滤器链(配置多个过滤器)</p>
<ul>
<li><p>注解：按照类名的字符串规则比较，值小的先执行</p>
</li>
<li><p>web.xml：<filter-mapping>谁定义在上边，谁先执行</filter-mapping></p>
</li>
</ul>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/11/11/AJAX/</url>
      <content type="html"><![CDATA[<h4><span id="ajax">AJAX</span></h4><h5><span id="概念">概念</span></h5><p>ASynchronous JavaScript And XML 异步的js和xml<br>无需加载整个页面的情况下能够更新部分网页技术</p>
<h4><span id="实现方式">实现方式</span></h4><ol>
<li><p>异步和同步<br>客户端和服务器相互通信的基础上<br>同步：客户端必须等待服务器的响应，等待期间不能做其他操作<br>异步：客户端不需要等待服务器的响应</p>
</li>
<li><p>实现方式</p>
<ol>
<li><p>原生的js实现方式</p>
</li>
<li><p>JQuery实现方式</p>
<ol>
<li><p>$.ajax()</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"url"</span>,</span><br><span class="line">    type: <span class="string">"type"</span>,</span><br><span class="line">    data: &#123;<span class="string">"d1"</span>:<span class="string">"v1"</span>,<span class="string">"d2"</span>:<span class="string">"v2"</span>&#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    &#125;,响应后的回调函数</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>$.get()</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>(url,data,callback,type)</span><br></pre></td></tr></table></figure>
</li>
<li><p>$.post()</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(url,data,callback,type)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      
        
    </entry>
    
    <entry>
      <title></title>
      <url>/2019/11/11/Xml/</url>
      <content type="html"><![CDATA[<h3><span id="xml">XML</span></h3><h4><span id="概念">概念</span></h4><ol>
<li>Extensible Markup Language 可扩展标记语言</li>
<li>功能<ol>
<li>配置文件</li>
<li>网络传输</li>
</ol>
</li>
</ol>
]]></content>
      
        
    </entry>
    
  
  
</search>
